# -*- coding: utf-8 -*-
"""matches

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J9qsPdXNKyFK1Iut-AjAJXWf7am2YgTu
"""


import difflib as diff
from transliterate import translit
import pandas as pd
from transliterate import get_available_language_codes
from fuzzywuzzy import process
from fuzzywuzzy import fuzz
from googletrans import Translator
import requests

def get_codes():
  print(get_available_language_codes())

def is_non_latin(word):
    return any(ord(char) > 127 for char in word)

def translate_non_latin_word(word, target_language='en'):
    translation = word
    if is_non_latin(word):
        translator = Translator()
        translation = translator.translate(word, dest=target_language).text

    return translation

def transl(word):
  text = word
  if is_non_latin(word):
    text = translit(word, reversed=True)
  return text

def matches(input_word, target,k,isgoogletranslator = False):
  if isgoogletranslator:
    word = translate_non_latin_word(input_word)
  else:  
    word = transl(input_word)
  
  matches = diff.get_close_matches(word,target, n=k)
  return matches

def matchesfuzz(input_word, target, k):
    text = input_word
    ratios = [(city, fuzz.partial_ratio(text, city)) for city in target]
    sorted_ratios = sorted(ratios, key=lambda x: x[1], reverse=True)
    return [city[0] for city in sorted_ratios[:k]]

def geonamesapiinfo (city, country_code, username, num):
    
    url = f'http://api.geonames.org/searchJSON?q={city}&country={country_code}&maxRows={num}&username={username}'
        
    response = requests.get(url)
    dataapi = response.json()
    print(f"Data for {city}:")
    for item in dataapi['geonames']:
        for key, value in item.items():
            print(f"{key}: {value}")
        print()  # Пустая строка для разделения данных каждого города
    print()
    
def sorted_data (data,names):
    dfnames = data[data['name_1'].isin(names)]

    dfnames.loc[data['name_1'].isin(names), 'name_order'] = dfnames['name_1'].apply(
    lambda x: names.index(x) if x in names else -1)

    sorted_data = dfnames.sort_values('name_order')

    sorted_data = sorted_data.drop('name_order', axis=1)

    return sorted_data
